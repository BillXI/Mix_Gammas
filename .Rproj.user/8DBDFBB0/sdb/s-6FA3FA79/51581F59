{
    "contents" : "source(\"./Code/gammamixEM2.R\")\nset.seed(518)\nlibrary(\"mixtools\")\nlibrary(\"MASS\")\n\n##################\n# sample.size = 5\nn.iter = 5000 # this is B\nsample.size = c(100, 250, 500)\n\nparameters <- function(){\n        conditions <- list()\n        # Condition 1\n        conditions[[\"C1\"]] <- data.frame(c(2,5),c(3,4),c(0.5,0.5))\n        colnames(conditions[[\"C1\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 2\n        conditions[[\"C2\"]] <- data.frame(c(2,5),c(3,4),c(0.2,0.8))\n        colnames(conditions[[\"C2\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 3\n        conditions[[\"C3\"]] <- data.frame(c(1,10),c(1,1),c(0.5,0.5))\n        colnames(conditions[[\"C3\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 4\n        conditions[[\"C4\"]] <- data.frame(c(1,10),c(1,1),c(0.2,0.8))\n        colnames(conditions[[\"C4\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 5\n        conditions[[\"C5\"]] <- data.frame(c(2,30),c(3,2),c(0.5,0.5))\n        colnames(conditions[[\"C5\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 6\n        conditions[[\"C6\"]] <- data.frame(c(2,30),c(3,2),c(0.2,0.8))\n        colnames(conditions[[\"C6\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 7\n        conditions[[\"C7\"]] <- data.frame(c(2,5,6),c(3,5,7),c(1/3,1/3,1/3))\n        colnames(conditions[[\"C7\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 8\n        conditions[[\"C8\"]] <- data.frame(c(2,5,6),c(3,5,7),c(0.2,0.3,0.5))\n        colnames(conditions[[\"C8\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 9\n        conditions[[\"C9\"]] <- data.frame(c(1,20,50),c(2,4,3),c(0.2,0.3,0.5))\n        colnames(conditions[[\"C9\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 10\n        conditions[[\"C10\"]] <- data.frame(c(1,20,50),c(2,4,3),c(0.2,0.3,0.5))\n        colnames(conditions[[\"C10\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 11\n        conditions[[\"C11\"]] <- data.frame(c(2,50,180),c(1,2,3),c(0.2,0.3,0.5))\n        colnames(conditions[[\"C11\"]]) <- c(\"a\", \"b\", \"l\")\n        # Condition 12\n        conditions[[\"C12\"]] <- data.frame(c(2,50,180),c(1,2,3),c(0.2,0.3,0.5))\n        colnames(conditions[[\"C12\"]]) <- c(\"a\", \"b\", \"l\")\n        return(conditions)\n}\nconditions <- parameters()\n\n#################################\nset.seed(111)\nsample.generation <- function(sample.size, parameters){\n        samples <- apply(parameters, 1, function(i){rgamma(sample.size* i[3], shape = i[1], scale = i[2])\n        })\n        return(unlist(samples))\n}\n\nsample <- sample.generation(100, conditions[[\"C12\"]])\n\n###################################\nestimation1.f <- function(dat, para){\n        a <- para$a\n        b <- para$b\n        l <- para$l\n        numOfDist <- nrow(para)\n        output <- gammamixEM2(dat, lambda = l, alpha = a, beta = b, k = numOfDist)\n        return(output[2:4])\n}\n\nestimation2.f <- function(dat, para){\n        numOfDist <- nrow(para)\n        output <- gammamixEM2(dat, k = numOfDist, epsilon = 0.1)\n        return(output[2:4])\n}\n\nestimation3.f <- function(dat, para){\n        datCubeRoot <- dat^(1/3)\n        numOfDist <- nrow(para)\n        classification <- normalmixEM(datCubeRoot, k = numOfDist) ## The classified data are clustered and not like real classified.\n        clf.dat <- apply((classification$posterior == T), 2, function(x) dat[x] )\n        para.est <- lapply(c(1:numOfDist), function(i){\n                test = try(nr.gamma(x=unlist(clf.dat[i]), eps = 0.01), silent = T)\n                if (class(test)==\"try-error\"){\n                        test = as.numeric(gammamix.init(unlist(clf.dat[i]), lambda = 1, k = 1)[2:3])                \n                        return(test)}\n                else{return(test$theta)}\n        }) \n        a <- unlist(data.frame(para.est)[1,])\n        b <- unlist(data.frame(para.est)[2,])\n        l <- apply((classification$posterior == T), 2, function(x) {table(x)[\"TRUE\"]/length(x)} )\n        output <- gammamixEM2(dat, lambda = l, alpha = a, beta = b, k = numOfDist)[2:4]\n        return(output)\n}\n\nestimation4.f <- function(dat, para){\n        datCubeRoot <- dat^(1/3)\n        numOfDist <- nrow(para)\n        classification <- normalmixEM(datCubeRoot, k = numOfDist)\n        clf.dat <- apply((classification$posterior == T), 2, function(x) dat[x] )\n        para.est <- lapply(c(1:numOfDist), function(i){\n                test = try(nr.gamma(x=unlist(clf.dat[i]), eps = 0.01), silent = T)\n                if (class(test)==\"try-error\"){\n                        test = as.numeric(gammamix.init(unlist(clf.dat[i]), lambda = 1, k = 1)[2:3])                \n                        return(test)}\n                else{return(test$theta)}\n        }) \n        a <- para$a\n        b <- unlist(data.frame(para.est)[2,])\n        l <- apply((classification$posterior == T), 2, function(x) {table(x)[\"TRUE\"]/length(x)} )\n        output <- gammamixEM2(dat, lambda = l, alpha = a, beta = b, k = numOfDist, fix.alpha = T)[2:4]\n        return(output)\n}\n\n#################################\nlibrary(parallel)\nsimulation <- function(s.size, condition, strategy){\n        # 12 conditions\n        results <- lapply(condition, function(para){\n                # 3 sample size\n                # print(para)\n                one.iteration.results <- lapply(s.size, function(s){\n                        #print(s)\n                        dat <- sample.generation(sample.size = s, parameters = para)\n                        one.sample.result <- strategy(dat, para)\n                        return(one.sample.result)\n                })\n                return(one.iteration.results)\n        })        \n        return(results)\n}\n\nsim1 <- mclapply( (1:n.iter), function(i){\n        results <- simulation(sample.size, conditions, estimation1.f)\n        return(results)\n})",
    "created" : 1467596376029.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2089637667",
    "id" : "51581F59",
    "lastKnownWriteTime" : 1467596740,
    "path" : "C:/Users/xch234/Desktop/Mix_Gammas/Code/simulation.R",
    "project_path" : "Code/simulation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}